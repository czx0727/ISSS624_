---
title: "Take-home Exercise 2: Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows"
author: "Chai Zhixuan"
editor: visual
date: 2023-12-06
date-format: long
date-modified: "last-modified"
---

# **1 Overview**

In this study, I will continue my geospatial analytics learning journey to demonstrate the potential value of geospatial data science and analysis (GDSA) to integrate publicly available data from multiple sources for building a spatial interaction models to determine factors affecting urban mobility patterns of public bus transit.

# **2 Getting Started**

## **2.1 Setting the Analytical Tools**

The code chunk below installs and loads the various packages

```{r}
pacman::p_load(tmap, sf, DT, stplanr,
               performance,
               ggpubr, tidyverse)
```

# **3 Data Preparation**

## **3.1 Data**

### **3.1.1 Importing the OD data**

Firstly, we will import the *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall by using `read_csv()` of **readr** package.

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
```

Let use display the *odbus* tibble data table by using the code chunk below.

```{r}
glimpse(odbus)
```

A quick check of odbus tibble data frame shows that the values in OROGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) 
```

For the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o\'clock.

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

We will save the output in rds format for future used.

```{r}
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

The code chunk below will be used to import the save odbus6_9.rds into R environment.

```{r}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

### **3.1.2 Importing Geospatial data into R**

For the purpose of this exercise, three geospatial data will be used. They are:

-   BusStop: This data provides the location of bus stop as at last quarter of 2023.

-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.

-   Hexagon: analytical hexagon data of 325m (this distance is the perpendicular distance between the centre of the hexagon and its edges) to represent the [traffic analysis zone (TAZ)](https://tmg.utoronto.ca/files/Reports/Traffic-Zone-Guidance_March-2021_Final.pdf).

First 2 data sets are in ESRI shapefile format. Last file will be derived from R in the later setion

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz
```

```{r}
mpsz <- write_rds(mpsz, "data/rds/mpsz.rds")
```

# **4 Geospatial data wrangling**

## **4.1 Combining Busstop and mpsz**

Code chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) 
```

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.rds")  
```

## 4.2 Creating Hexagon layer

Now, I am going to create a hexagon layer:

```{r}
# cell size of layer of 250m
area_honeycomb_grid = st_make_grid(busstop_mpsz, c(650, 650), what = "polygons", square = FALSE, crs = 3414)

# To sf and add grid ID
honeycomb_grid_sf = st_sf(area_honeycomb_grid)
```

```{r}
st_write(honeycomb_grid_sf, "data/geospatial/hexagon.shp",append=TRUE)
```

```{r}
hexagon <- st_read(dsn = "data/geospatial",
                   layer = "hexagon") %>%
  st_transform(crs = 3414)
```

## 4.3 Combine Hexagon and Busstop_Mpzx

Next, we are going to combine the datset busstop_mpsz and hexagon

```{r}
od_data <- st_join(busstop_mpsz , hexagon,
            by = c("geometry" = "geometry")) 
```

## 4.4 Combine odbus6_9 with od_data

```{r}
od_data_1 <- left_join(odbus6_9 , od_data,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

Before continue, it is a good practice for us to check for duplicating records.

```{r}
duplicate <- od_data_1 %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

If duplicated records are found, the code chunk below will be used to retain the unique records.

```{r}
od_data_1 <- unique(od_data_1)
```

It will be a good practice to confirm if the duplicating records issue has been addressed fully.

Next, we will update od_data data frame with the planning subzone codes

```{r}
od_data_2 <- left_join(od_data_1 , od_data,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

```{r}
duplicate <- od_data_2 %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
od_data_2 <- unique(od_data_2)
```

```{r}
od_data_2 <- od_data_2 %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

It is time to save the output into an rds file format.

```{r}
write_rds(od_data_2, "data/rds/od_data_2.rds")
```

```{r}
od_data_2 <- read_rds("data/rds/od_data_2.rds")
```

## **5 Visualising Spatial Interaction**

## **5.1 Removing intra-zonal flows**

I will not plot the intra-zonal flows. The code chunk below will be used to remove intra-zonal flows.

```{r}
od_data_3 <- od_data_2[od_data_2$ORIGIN_SZ!=od_data_2$DESTIN_SZ,]
```

## 5.2 **Creating desire lines**

In this code chunk below, `od2line()` of **stplanr** package is used to create the desire lines.

```{r}
flowLine <- od2line(flow = od_data_3, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

## 5.3 **Visualising the desire lines**

To visualise the resulting desire lines, the code chunk below is used.

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

When the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5000 as shown below.

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```
