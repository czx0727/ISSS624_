---
title: "In-class Exercise 4: Calibrating Spatial Interaction Models with R"
author: "Chai Zhixuan"
editor: visual
date: 2023-12-10
date-format: long
date-modified: "last-modified"
---

## **Overview**

This in-class exercise is a continuation of Hands-on Exercise 3, In-class Exercise 3 and In-class Exercise 4: Preparing Spatial Interaction Modelling Variables. We will continue our journey of calibrating Spatial Interaction Models by using propulsiveness and attractiveness variables prepared in earlier in-class exercise.

## **Getting Started**

```{r}
pacman::p_load(tmap, sf, performance, knitr,
               AER, MASS, ggpubr, tidyverse,
               epiDisplay)
```

## **The Data**

```{r}
flow_data <- read_rds("data/rds/flow_data_tidy.rds")
```

```{r}
glimpse(flow_data)
```

```{r}
kable(head(flow_data[, 1:5], n = 5))
```

### **Preparing inter-zonal flow data**

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ,
  0, flow_data$MORNING_PEAK)
flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ,
  0.000001, 1)
```

```{r}
inter_zonal_flow <- flow_data %>%
  filter(FlowNoIntra > 0)
```

## **Calibrating Spatial Interaction Models**

### **Origin- (Production-) constrained Model**

```{r}
orcSIM_Poisson <- glm(formula = MORNING_PEAK ~ 
                ORIGIN_SZ +
                log(SCHOOL_COUNT) +
                log(dist) - 1,
              family = poisson(link = "log"),
              data = inter_zonal_flow,
              na.action = na.exclude)
summary(orcSIM_Poisson)
```

::: callout-note
Use file from elearn, there is no BUSINESS_COUNT. I have separated ex4 and ex4.1 for learning purpose
:::

### **Goodness of fit**

```{r}
CalcRSquared <- function(observed, estimated){
  r <- cor(observed, estimated)
  R2 <- r^2
  R2
}
```

```{r}
CalcRSquared(orcSIM_Poisson$data$MORNING_PEAK, orcSIM_Poisson$fitted.values)
```

### **Doubly constrained model**

```{r}
dbcSIM_Poisson <- glm(formula = MORNING_PEAK ~ 
                ORIGIN_SZ + 
                DESTIN_SZ +
                log(dist),
              family = poisson(link = "log"),
              data = inter_zonal_flow,
              na.action = na.exclude)
summary(dbcSIM_Poisson)
```

```{r}
CalcRSquared(dbcSIM_Poisson$data$MORNING_PEAK,
             dbcSIM_Poisson$fitted.values)
```

## **Model comparison**

### **Statistical measures**

```{r}
model_list <- list(
  Origin_Constrained = orcSIM_Poisson,
  Doubly_Constrained = dbcSIM_Poisson)
```

```{r}
compare_performance(model_list,
                    metrics = "RMSE")
```

### **Visualising fitted values**

```{r}
df <- as.data.frame(orcSIM_Poisson$fitted.values) %>%
  round(digits = 0)
```

```{r}
inter_zonal_flow <- inter_zonal_flow %>%
  cbind(df) %>%
  rename(orcTRIPS = "orcSIM_Poisson.fitted.values")
```

```{r}
df <- as.data.frame(dbcSIM_Poisson$fitted.values) %>%
  round(digits = 0)
```

```{r}
inter_zonal_flow <- inter_zonal_flow %>%
  cbind(df) %>%
  rename(dbcTRIPS = "dbcSIM_Poisson.fitted.values")
```

```{r}
orc_p <- ggplot(data = inter_zonal_flow,
                aes(x = orcTRIPS,
                    y = MORNING_PEAK)) +
  geom_point() +
  geom_smooth(method = lm) +
  coord_cartesian(xlim=c(0,150000),
                  ylim=c(0,150000))

dbc_p <- ggplot(data = inter_zonal_flow,
                aes(x = dbcTRIPS,
                    y = MORNING_PEAK)) +
  geom_point() +
  geom_smooth(method = lm) +
  coord_cartesian(xlim=c(0,150000),
                  ylim=c(0,150000))
```

```{r}
ggarrange(orc_p, dbc_p,
          ncol = 2,
          nrow = 1)
```
