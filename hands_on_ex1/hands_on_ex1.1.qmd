---
title: "Hands-on Exercise 1.1: Geospatial Data Wrangling with R"
editor: visual
date: 2023-11-15
date-format: long
date-modified: "last-modified"
---

## Overview

In this hands-on exercise, I learn how to import and wrangling geospatial data in using appropriate R packages.

## Getting Started

The code chunk below install and load [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

## Importing Geospatial Data

### Importing polygon feature data

Dataset used:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)

-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)

-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

Click [here](https://www.rdocumentation.org/packages/sf/versions/0.2-2/topics/st_read) to know more about st_read()

1.  `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format

```{r}
mpsz = st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

2.  `CyclingPath`, a line feature layer in ESRI shapefile format

```{r}
cyclingpath = st_read(dsn = "data/geospatial",                           layer = "CyclingPathGazette")
```

3.  `PreSchool`, a point feature layer in kml file format

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

### Checking content of a simple dataframe

1.  Working with [st_geometry()](asic%20information%20of%20the%20feature%20class%20such%20as%20type%20of%20geometry,%20the%20geographic%20extent%20of%20the%20features%20and%20the%20coordinate%20system%20of%20the%20data)

```{r}
st_geometry(mpsz)
```

2.  Working with [glimpse()](https://www.rdocumentation.org/packages/tibble/versions/3.0.1/topics/glimpse)

```{r}
glimpse(mpsz)
```

3.  Working with [head()](https://www.digitalocean.com/community/tutorials/head-and-tail-function-r)

```{r}
head(mpsz, n=5) 
```

### Plotting Geospatial Data

1.  Using plot - Default plot of an object is a multi-plot of all attributes, up to a reasonable maximum as shown below

```{r}
plot(mpsz)
```

2.  Choose only the geometry

```{r}
plot(st_geometry(mpsz))
```

3.  Plot sf using special attributes

```{r}
plot(mpsz["PLN_AREA_N"])
```

### Assigning EPSG code to a simple feature data frame

This is an example the coordinate system of `mpsz` simple feature data frame by using [*st_crs()*](https://r-spatial.github.io/sf/reference/st_crs.html) of *sf* package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414)

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Check the CSR again

```{r}
st_crs(mpsz3414)
```

### Transforming the projection of preschool from wgs84 to svy21

Let us perform the projection transformation by using the code chunk below.

1.  Print head of preschool

```{r}
head(preschool, n=5)
```

2.  Transform the data

```{r}
preschool3414 <- st_transform(preschool,                                crs = 3414)
```

3.  Display data

```{r}
head(preschool3414, n=5)
```

## Importing the aspatial data

### Import listing data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

Examine the dataset after importing to see if it is imported correctly

```{r} list(listings)}
```

### Creating a simple feature data frame from an aspatial data frame

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Examine the dataset below

```{r}
glimpse(listings_sf)
```

## Geoprocessing with sf package

**sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section below, I will demonstrate how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### Buffering

Scenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. I am tasked to determine the extend of the land need to be acquired and their total area.

Solution:

1.  Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath,dist=5, nQuadSegs = 30)
```

2.  This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

3.  Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

Scenario: A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

Solution:

1.  The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

2.  Check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

3.  To list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

\*\*DIY: Calculate the density of pre-school by planning subzone.

1.  Firstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%   st_area()
```

2.  Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/) package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%   mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Explorotary Data Analysis (EDA)

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}

ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

\*\* Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
